7) CREATE A BAR GRAPH TO DEPICT THE NUMBER OF APPLICATIONS FOR EACH YEAR?

--public static class Mymapper extends Mapper<LongWritable,Text,IntWritable,Text>
	{
		public void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException
		{
			String str[]=value.toString().split("\t");
			int i=Integer.parseInt(str[7]);
			//int a=Integer.parseInt(str[1]);
			context.write(new IntWritable(i),new Text(str[1]));
		}
		
	}
	public static class Myreducer extends Reducer<IntWritable,Text,IntWritable,IntWritable>
	{
		public void reduce(IntWritable key,Iterable<Text> value,Context context) throws IOException, InterruptedException
		{
			int count=0;
			for(Text v:value)
			{
				count++;
				
			}
			context.write(key,new IntWritable(count));
		}
	}
	public static void main(String args[]) throws IOException, ClassNotFoundException, InterruptedException
	{
		Configuration conf=new Configuration();
		Job job=Job.getInstance(conf,"max");
		job.setJarByClass(query7.class);
		job.setMapperClass(Mymapper.class);
		job.setReducerClass(Myreducer.class);
		job.setCombinerClass(Myreducer.class);
		job.setMapOutputKeyClass(IntWritable.class);
		job.setMapOutputValueClass(Text.class);
		job.setOutputKeyClass(IntWritable.class);
		job.setOutputValueClass(IntWritable.class);
		FileInputFormat.addInputPath(job,new Path(args[0]));
		FileSystem.get(conf).delete(new Path(args[1]),true);
		FileOutputFormat.setOutputPath(job,new Path(args[1]));
		System.exit(job.waitForCompletion(true)?0:1);
	}
output:
2011	358767
2012	415607
2013	442114
2014	519427
2015	618727
2016	647803



